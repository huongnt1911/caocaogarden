@inject IDeleteProductUseCase deleteProductUseCase
@inject IUpdateQuantityUseCase updateQuantityUseCase
@using MudBlazor

<br/>
<br />
<br />
<br/>
<br />

@if (LineItem != null && LineItem.Product != null)
{
    <li class="row">
        <div class="col">
            <MudGrid>
                <MudItem md="3">
                    <MudCard Align="Align.Center">
                        <MudCardMedia Image="@LineItem.Product.ImageLink" Height="200" />
                        <MudCardContent>
                            <MudText Typo="Typo.h5">@LineItem.Product.Name</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem>
                    <div class="col">
                        @*<h5>@LineItem.Product.Name</h5>*@
                        <br/>
                        <br/>
                        <div>
                            Số Lượng:&nbsp;&nbsp;
                            <input type="number" min="0" value="@LineItem.Quantity" @onchange="HandleQuantityChange" />
                        </div>
                        <br />
                        <br />
                        <div>
                            Giá&nbsp;&nbsp;@LineItem.Product.Price.ToString("c")
                        </div>
                    </div>
                    <br />
                    <br />
                    <div class="col">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Error" @onclick="@(() => DeleteProduct(LineItem.ProductId))">
                            Xóa
                        </MudButton>
                        
                    </div>

                </MudItem>
            </MudGrid>
            @*<img src="@LineItem.Product.ImageLink" />*@
        </div>
    </li>
}

@code {
    [Parameter]
    public OrderLineItem LineItem { get; set; }

    [Parameter]
    public EventCallback<Order> OnDeleteProduct { get; set; }

    [Parameter]
    public EventCallback<Order> OnUpdateQuantity { get; set; }

    async void HandleQuantityChange(ChangeEventArgs e)
    {
        if (e.Value == null || string.IsNullOrEmpty(e.Value.ToString())) return;
        int qty = 0;
        if (int.TryParse(e.Value.ToString(), out qty))
        {
            if (qty < 0) return;
            var order = await updateQuantityUseCase.Excute(LineItem.ProductId, qty);
            await OnUpdateQuantity.InvokeAsync(order);
        }
    }

    async void DeleteProduct(int productId)
    {
        var order = await deleteProductUseCase.Execute(productId);
        await OnDeleteProduct.InvokeAsync(order);
    }
}
